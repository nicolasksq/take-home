// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	lists "server/app/vendors/mailchimp-go/lists"

	members "server/app/vendors/mailchimp-go/lists/members"

	mock "github.com/stretchr/testify/mock"
)

// MailchimpLib is an autogenerated mock type for the MailchimpLib type
type MailchimpLib struct {
	mock.Mock
}

// Get provides a mock function with given fields: params
func (_m *MailchimpLib) GetLists(params *lists.GetParams) (*lists.Lists, error) {
	ret := _m.Called(params)

	var r0 *lists.Lists
	if rf, ok := ret.Get(0).(func(*lists.GetParams) *lists.Lists); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lists.Lists)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lists.GetParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewList provides a mock function with given fields: params
func (_m *MailchimpLib) NewList(params *lists.NewParams) (*lists.List, error) {
	ret := _m.Called(params)

	var r0 *lists.List
	if rf, ok := ret.Get(0).(func(*lists.NewParams) *lists.List); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lists.List)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lists.NewParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMembers provides a mock function with given fields: listID, params
func (_m *MailchimpLib) NewMembers(listID string, params *members.NewParams) (*members.MembersResponse, error) {
	ret := _m.Called(listID, params)

	var r0 *members.MembersResponse
	if rf, ok := ret.Get(0).(func(string, *members.NewParams) *members.MembersResponse); ok {
		r0 = rf(listID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*members.MembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *members.NewParams) error); ok {
		r1 = rf(listID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
